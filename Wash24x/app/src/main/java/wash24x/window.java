package wash24x;

import java.util.Random;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class window {

    // AI customer simulation
    private static final String[] AI_NAMES = { "JAMPEE", "ball245", "aeicat", "Atipatno.1", "TAOX" };
    private static final String[] AI_SERVICES = { "Regular Wash", "Dry Clean", "Ironing", "Deluxe Wash", "Drying" };
    private Timeline aiSimulationTimeline;
    private Random random = new Random();
    private static final int NUM_MACHINES = 12;
    private final MachineManager machineManager = MachineManager.getInstance();
    private Timeline[] machineTimelines = new Timeline[NUM_MACHINES];
    private Button[] machineButtons = new Button[NUM_MACHINES];
    private Text[] statusTexts = new Text[NUM_MACHINES];
    private int[] aiPickupTimers = new int[NUM_MACHINES];
    private BorderPane root;
    ListView<String> lastview = new ListView<>();
    String lastService = UserData.getLastOrderService();
    String currentUser = UserData.getCurrentUsername();
    String userProfile = UserData.getCurrentUserProfile();

    // Constructor ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    public window(Stage primaryStage) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á GridPane ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å
        GridPane grid = new GridPane();
        grid.setHgap(20);
        grid.setVgap(15);
        grid.setPadding(new Insets(20));
        grid.setAlignment(Pos.CENTER);

        // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å
        for (int i = 0; i < NUM_MACHINES; i++) {
            final int machineIndex = i;
            MachineStatus status = machineManager.getStatus(machineIndex);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
            Button machineButton = new Button("Machine " + (i + 1) + " üß∫");
            Text statusText = new Text(getStatusText(status));
            updateButtonStyle(machineButton, status);

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á UI elements
            machineButtons[machineIndex] = machineButton;
            statusTexts[machineIndex] = statusText;

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î event handler ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å
            machineButton.setOnAction(event -> {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                MachineStatus currentStatus = machineManager.getStatus(machineIndex);
                String orderOwner = UserData.getOrderOwner(machineIndex);
                String currentUser = UserData.getCurrentUsername();
                String currentUserRole = UserData.getUserRole(currentUser);

                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                if (currentStatus == MachineStatus.AVAILABLE) {
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                    new WashOrder(primaryStage, machineIndex + 1, () -> {
                        // ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å manager (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß)
                        MachineStatus updatedStatus = machineManager.getStatus(machineIndex);

                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        statusText.setText(getStatusText(updatedStatus));
                        updateButtonStyle(machineButton, updatedStatus);

                        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° timeline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                        if (updatedStatus == MachineStatus.WORKING) {
                            startMachineStatusUpdater(machineIndex);
                        }
                    });
                } else if (currentStatus == MachineStatus.WORKING) {
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                    if ("staff".equals(currentUserRole) ||
                            (orderOwner != null && orderOwner.equals(currentUser))) {
                        showOrderDetails(machineIndex);
                    } else {
                        showAccessDeniedAlert();
                    }
                } else if (currentStatus == MachineStatus.FINISH) {
                    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                    if ("staff".equals(currentUserRole) ||
                            (orderOwner != null && orderOwner.equals(currentUser))) {
                        showPickupConfirmation(machineIndex);
                    } else {
                        showAccessDeniedAlert();
                    }
                } else {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Machine Status");
                    alert.setHeaderText(null);
                    alert.setContentText("Machine " + (machineIndex + 1) + " is currently " +
                            currentStatus.toString().toLowerCase() + " and cannot be used.");
                    alert.show();
                }
            });

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á VBox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            VBox box = new VBox(5, machineButton, statusText);
            box.setAlignment(Pos.CENTER);
            grid.add(box, i % 3, i / 3);

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            if (status == MachineStatus.WORKING || status == MachineStatus.FINISH) {
                startMachineStatusUpdater(machineIndex);
            }
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ AI
        startAISimulation(primaryStage);

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        Label userLabel = new Label(userProfile + " Current User: " + currentUser);
        userLabel.setStyle("-fx-text-fill: white; -fx-font-weight: bold; -fx-font-size: 14px;");

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        Button logoutButton = new Button("Logout");
        logoutButton.setStyle("-fx-background-color: rgb(219, 0, 40); -fx-text-fill: white;");
        logoutButton.setOnAction(e -> {
            stopAllTimelines();
            new Login(primaryStage);
        });

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
        TextField textField = new TextField();
        ListView<String> listView = new ListView<>();
        Label label = new Label("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 0 ‡∏ö‡∏≤‡∏ó");

        // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        Button resetButton = new Button("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï");
        resetButton.setOnAction(e -> {
            textField.clear();
            listView.getItems().clear(); // ‚úÖ ‡πÉ‡∏ä‡πâ listView ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ
            label.setText("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 0 ‡∏ö‡∏≤‡∏ó");
        });

        // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        Button reportIssueButton = new Button("Report Issue");
        reportIssueButton.setStyle("-fx-background-color: rgb(255, 165, 0); -fx-text-fill: white;");
        reportIssueButton.setOnAction(e -> showReportIssueDialog());

        // ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        Button Accountbutton = new Button("üë§Account");
        Accountbutton.setStyle("-fx-background-color: rgb(82, 137, 0) ; -fx-text-fill: white;");
        Accountbutton.setOnAction(e -> new UpdateAccount(primaryStage, currentUser));

        // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
        Button transactionButton = new Button("Transaction");
        transactionButton.setStyle("-fx-background-color: rgb(9, 164, 241) ; -fx-text-fill: white;");
        transactionButton.setOnAction(e -> new TopUp(primaryStage));

        // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)
        Button backviewissisButton = new Button("View issue");
        backviewissisButton.setOnAction(e -> {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            String currentUser = UserData.getCurrentUsername();
            String currentUserRole = UserData.getUserRole(currentUser);
            if ("staff".equals(currentUserRole)) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô staff ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ StaffDashboard
                new StaffDashboard(primaryStage);
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà staff ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Alert ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("Access Denied");
                alert.setHeaderText(null);
                alert.setContentText("Access Denied: Only staff can view issues.");
                alert.show();
            }
        });

        // ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        HBox buttonBox = new HBox(10, backviewissisButton, reportIssueButton, Accountbutton, transactionButton,
                logoutButton);
        buttonBox.setAlignment(Pos.CENTER);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á BorderPane ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        this.root = new BorderPane();
        this.root.setCenter(new VBox(10, userLabel, grid, buttonBox));
        root.setPadding(new Insets(20));
        root.setStyle(
                "-fx-background-color:rgb(1, 128, 255); -fx-border-color:rgb(0, 0, 0); -fx-border-radius: 10px; -fx-padding: 20px;");

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Scene ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        Scene scene = new Scene(root, 550, 550);
        primaryStage.setTitle("üéõÔ∏è Status Machine üê¶‚Äçüî•");
        primaryStage.setScene(scene);
        primaryStage.centerOnScreen();
        primaryStage.show();
    }

    // ‡πÅ‡∏™‡∏î‡∏á Alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    private void showAccessDeniedAlert() {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Access Denied");
        alert.setHeaderText(null);
        alert.setContentText(
                "You don't have permission to access this machine's orders. Only staff or the customer who placed the order can access it.");
        alert.show();
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤
    private void showPickupConfirmation(int machineIndex) {
        String lastService = UserData.getLastOrderService();
        String orderOwner = UserData.getOrderOwner(machineIndex);

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Laundry Ready");
        alert.setHeaderText("Machine " + (machineIndex + 1) + " - Order Complete");
        alert.setContentText("Customer: " + (orderOwner != null ? orderOwner : "Unknown") + "\n" +
                "Service: " + (lastService != null ? lastService : "laundry") + "\n" +
                "Ready for pickup. Confirm pickup?");

        ButtonType pickupButton = new ButtonType("Pickup");
        ButtonType cancelButton = ButtonType.CANCEL;

        alert.getButtonTypes().setAll(pickupButton, cancelButton);

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        alert.showAndWait().ifPresent(response -> {
            if (response == pickupButton) {
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô AVAILABLE
                machineManager.setStatus(machineIndex, MachineStatus.AVAILABLE);

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                Text statusText = statusTexts[machineIndex];
                Button button = machineButtons[machineIndex];
                statusText.setText(getStatusText(MachineStatus.AVAILABLE));
                updateButtonStyle(button, MachineStatus.AVAILABLE);

                // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                UserData.clearLastOrder();
                UserData.removeOrderOwner(machineIndex);

                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                Alert confirmAlert = new Alert(Alert.AlertType.INFORMATION);
                confirmAlert.setTitle("Pickup Confirmed");
                confirmAlert.setHeaderText(null);
                confirmAlert.setContentText("Thank you for using our service!");
                confirmAlert.show();
            }
        });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    private void showOrderDetails(int machineIndex) {
        String lastService = UserData.getLastOrderService();
        int remainingTime = UserData.getRemainingTime();
        String orderOwner = UserData.getOrderOwner(machineIndex);

        MachineStatus status = machineManager.getStatus(machineIndex);
        String statusMessage = (status == MachineStatus.FINISH) ? "Ready for pickup"
                : "Currently working - " + remainingTime + " seconds remaining";

        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Order Details");
        alert.setHeaderText("Machine " + (machineIndex + 1));

        String contentText = "Customer: " + userProfile + (orderOwner != null ? orderOwner : "Unknown") + "\n" +
                "Service: " + (lastService != null ? lastService : "Unknown") + "\n" +
                "Status: " + statusMessage;

        alert.setContentText(contentText);
        alert.show();
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    @SuppressWarnings("unused")
    private void cancelOrder(int machineIndex) {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        UserData.setLastCanceledOrder(machineIndex, UserData.getLastOrderService());

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        machineManager.setStatus(machineIndex, MachineStatus.AVAILABLE);
        UserData.removeOrderOwner(machineIndex);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        statusTexts[machineIndex].setText(getStatusText(MachineStatus.AVAILABLE));
        updateButtonStyle(machineButtons[machineIndex], MachineStatus.AVAILABLE);

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Order Canceled");
        alert.setHeaderText(null);
        alert.setContentText("Your order has been canceled. You can restore it later.");
        alert.show();
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    private void showReportIssueDialog() {
        Stage dialogStage = new Stage();
        VBox layout = new VBox(10);
        layout.setStyle("-fx-padding: 20px; -fx-background-color: white;");

        Label instructionLabel = new Label("Please describe the issue:");
        TextArea issueTextArea = new TextArea();
        issueTextArea.setPromptText("Describe the problem...");

        Button submitButton = new Button("Submit");
        submitButton.setOnAction(e -> {
            String issueText = issueTextArea.getText();
            if (!issueText.trim().isEmpty()) {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                String timestamp = java.time.LocalDateTime.now()
                        .format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                String reportEntry = UserData.getCurrentUsername() + " (" + timestamp + "): " + issueText;
                UserData.addReport(reportEntry);
                Alert alert = new Alert(Alert.AlertType.INFORMATION, "Your issue has been reported!", ButtonType.OK);
                alert.show();
                dialogStage.close();
            } else {
                Alert alert = new Alert(Alert.AlertType.WARNING, "Please enter a valid issue.", ButtonType.OK);
                alert.show();
            }
        });

        layout.getChildren().addAll(instructionLabel, issueTextArea, submitButton);

        Scene scene = new Scene(layout, 400, 250);
        dialogStage.setScene(scene);
        dialogStage.setTitle("Report an Issue");
        dialogStage.show();
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    private void restoreLastOrder(int machineIndex) {
        String lastService = UserData.getLastCanceledOrder(machineIndex);
        if (lastService != null) {
            UserData.setLastOrderService(lastService);
            machineManager.setStatus(machineIndex, MachineStatus.WORKING);

            statusTexts[machineIndex].setText(getStatusText(MachineStatus.WORKING));
            updateButtonStyle(machineButtons[machineIndex], MachineStatus.WORKING);

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Order Restored");
            alert.setHeaderText(null);
            alert.setContentText("Your last order (" + lastService + ") has been restored.");
            alert.show();
        } else {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("No Order to Restore");
            alert.setHeaderText(null);
            alert.setContentText("No previous order found.");
            alert.show();
        }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° Timeline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    private void startMachineStatusUpdater(int machineIndex) {
        // ‡∏´‡∏¢‡∏∏‡∏î timeline ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (machineTimelines[machineIndex] != null) {
            machineTimelines[machineIndex].stop();
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á timeline ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
        machineTimelines[machineIndex] = new Timeline(new KeyFrame(Duration.seconds(1), e -> {
            MachineStatus currentStatus = machineManager.getStatus(machineIndex);
            Button button = machineButtons[machineIndex];
            Text statusText = statusTexts[machineIndex];

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI elements
            statusText.setText(getStatusText(currentStatus));
            updateButtonStyle(button, currentStatus);

            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if (currentStatus == MachineStatus.WORKING) {
                // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                if (System.currentTimeMillis() / 500 % 2 == 0) {
                    button.setStyle("-fx-background-color: " + MachineColor.WORKING_COLOR + "; -fx-text-fill: black;");
                } else {
                    button.setStyle("-fx-background-color: #e74c3c; -fx-text-fill: white;");
                }
            } else if (currentStatus == MachineStatus.FINISH) {
                // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                if (System.currentTimeMillis() / 800 % 2 == 0) {
                    button.setStyle(
                            "-fx-background-color: " + MachineColor.FINALORDER_COLOR + "; -fx-text-fill: black;");
                } else {
                    button.setStyle("-fx-background-color: #27ae60; -fx-text-fill: white;");
                }

                // ‡∏ñ‡πâ‡∏≤‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå AI ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤‡∏Ç‡∏≠‡∏á AI
                String orderOwner = UserData.getOrderOwner(machineIndex);
                if (orderOwner != null && orderOwner.startsWith("AI-")) {
                    if (aiPickupTimers[machineIndex] == 0) {
                        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 10-15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                        aiPickupTimers[machineIndex] = 10 + random.nextInt(6);
                    } else {
                        aiPickupTimers[machineIndex]--;
                        if (aiPickupTimers[machineIndex] <= 0) {
                            // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ AI ‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤
                            machineManager.setStatus(machineIndex, MachineStatus.AVAILABLE);
                            UserData.removeOrderOwner(machineIndex);
                            aiPickupTimers[machineIndex] = 0;
                        }
                    }
                }
            }

            // ‡∏´‡∏¢‡∏∏‡∏î timeline ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
            if (currentStatus != MachineStatus.WORKING && currentStatus != MachineStatus.FINISH) {
                machineTimelines[machineIndex].stop();
                machineTimelines[machineIndex] = null;
            }
        }));

        machineTimelines[machineIndex].setCycleCount(Animation.INDEFINITE);
        machineTimelines[machineIndex].play();
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ AI
    private void startAISimulation(Stage primaryStage) {
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if (aiSimulationTimeline != null) {
            aiSimulationTimeline.stop();
        }

        aiSimulationTimeline = new Timeline(new KeyFrame(Duration.minutes(10), e -> {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            int availableMachineCount = 0;
            for (int i = 0; i < NUM_MACHINES; i++) {
                if (machineManager.getStatus(i) == MachineStatus.AVAILABLE) {
                    availableMachineCount++;
                }
            }

            // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 30% ‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ AI ‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if (availableMachineCount > 0 && random.nextDouble() < 0.3) {
                // ‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                int[] availableMachines = new int[availableMachineCount];
                int index = 0;
                for (int i = 0; i < NUM_MACHINES; i++) {
                    if (machineManager.getStatus(i) == MachineStatus.AVAILABLE) {
                        availableMachines[index++] = i;
                    }
                }

                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                int selectedMachineIndex = availableMachines[random.nextInt(availableMachineCount)];

                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ AI ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
                String aiName = AI_NAMES[random.nextInt(AI_NAMES.length)];
                String aiService = AI_SERVICES[random.nextInt(AI_SERVICES.length)];

                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô WORKING
                machineManager.setStatus(selectedMachineIndex, MachineStatus.WORKING);

                // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô AI ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ
                UserData.setOrderOwner(selectedMachineIndex, aiName);

                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                UserData.setLastOrderService(aiService);

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏•‡∏ß‡∏±‡∏ï‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                int duration = 30 + random.nextInt(60); // 30-90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ AI

                // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
                startAIMachineCountdown(selectedMachineIndex, duration);

                // Update UI
                Text statusText = statusTexts[selectedMachineIndex];
                Button button = machineButtons[selectedMachineIndex];

                if (statusText != null && button != null) {
                    statusText.setText(getStatusText(MachineStatus.WORKING));
                    updateButtonStyle(button, MachineStatus.WORKING);
                    startMachineStatusUpdater(selectedMachineIndex);
                }
            }
        }));

        aiSimulationTimeline.setCycleCount(Animation.INDEFINITE);
        aiSimulationTimeline.play();
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á AI
    private void startAIMachineCountdown(int machineIndex, int durationInSeconds) {
        Timeline aiWashingTimeline = new Timeline(new KeyFrame(Duration.minutes(1), e -> {
            // ‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
            int remainingTime = UserData.getRemainingTime();
            if (remainingTime > 0) {
                UserData.setRemainingTime(remainingTime - 1);
            }
        }));

        aiWashingTimeline.setCycleCount(durationInSeconds);
        aiWashingTimeline.setOnFinished(event -> {
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô FINISH ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            machineManager.setStatus(machineIndex, MachineStatus.FINISH);

            // Update UI
            Text statusText = statusTexts[machineIndex];
            Button button = machineButtons[machineIndex];
            if (statusText != null && button != null) {
                statusText.setText(getStatusText(MachineStatus.FINISH));
                updateButtonStyle(button, MachineStatus.FINISH);
            }
        });

        aiWashingTimeline.play();
    }
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á

    private String getStatusText(MachineStatus status) {
        return switch (status) {
            case AVAILABLE -> MachineColor.AVAILABLE_ICON;
            case WORKING -> MachineColor.WORKING_ICON;
            case IN_USE -> MachineColor.IN_USE_ICON;
            case FINISH -> MachineColor.FINALORDER_ICON;
            default -> "Status: " + status.toString();
        };
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    private void updateButtonStyle(Button button, MachineStatus status) {
        switch (status) {
            case AVAILABLE ->
                button.setStyle("-fx-background-color: " + MachineColor.AVAILABLE_COLOR + "; -fx-text-fill: black;");
            case WORKING ->
                button.setStyle("-fx-background-color: " + MachineColor.WORKING_COLOR + "; -fx-text-fill: black;");
            case IN_USE ->
                button.setStyle("-fx-background-color: " + MachineColor.IN_USE_COLOR + "; -fx-text-fill: black;");
            case FINISH ->
                button.setStyle("-fx-background-color: " + MachineColor.FINALORDER_COLOR + "; -fx-text-fill: black;");
        }
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏∏‡∏Å Timeline
    private void stopAllTimelines() {
        // ‡∏´‡∏¢‡∏∏‡∏î Timeline ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á AI
        if (aiSimulationTimeline != null) {
            aiSimulationTimeline.stop();
        }

        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏∏‡∏Å Timeline ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        for (int i = 0; i < NUM_MACHINES; i++) {
            if (machineTimelines[i] != null) {
                machineTimelines[i].stop();
            }
        }
    }

    // ‡∏£‡∏±‡∏ö root node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Scene
    public Parent getRoot() {
        return root;
    }

}