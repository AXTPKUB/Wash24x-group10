/*
 * This source file was generated by the Gradle 'init' task
 */
package wash24x;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.testfx.api.FxRobot;
import org.testfx.framework.junit5.ApplicationTest;
import org.testfx.service.query.NodeQuery;

import javafx.stage.Stage;
import javafx.scene.control.*;

public class ChangePasswordTest extends ApplicationTest {

    private Stage primaryStage;

    @Override
    public void start(Stage stage) {
        primaryStage = stage;
        new ChangePassword(primaryStage, "testUser");
    }

    @Test
    void testUIElementsExist() {
        assertNotNull(lookup("üîë Change Password").queryLabeled());
        assertNotNull(lookup(".password-field").query()); // Current Password
        assertNotNull(lookup(".password-field").nth(1).query()); // New Password
        assertNotNull(lookup(".password-field").nth(2).query()); // Confirm New Password
        assertNotNull(lookup("Save").queryButton());
        assertNotNull(lookup("Cancel").queryButton());
    }

    @Test
    void testValidPasswordChange() {
        clickOn(".password-field").write("correctOldPassword");
        ((FxRobot) ((NodeQuery) clickOn(".password-field")).nth(1)).write("newSecurePassword");
        ((FxRobot) ((NodeQuery) clickOn(".password-field")).nth(2)).write("newSecurePassword");
        clickOn("Save");

        assertTrue(lookup("Password updated successfully!").queryLabeled().isVisible());
    }

    @Test
    void testIncorrectOldPassword() {
        clickOn(".password-field").write("wrongPassword");
        ((FxRobot) ((NodeQuery) clickOn(".password-field")).nth(1)).write("newSecurePassword");
        ((FxRobot) ((NodeQuery) clickOn(".password-field")).nth(2)).write("newSecurePassword");
        clickOn("Save");

        assertTrue(lookup("Incorrect current password!").queryLabeled().isVisible());
    }

    @Test
    void testMismatchedNewPasswords() {
        clickOn(".password-field").write("correctOldPassword");
        ((FxRobot) ((NodeQuery) clickOn(".password-field")).nth(1)).write("newPassword123");
        ((FxRobot) ((NodeQuery) clickOn(".password-field")).nth(2)).write("newPassword456"); // ‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        clickOn("Save");

        assertTrue(lookup("New passwords do not match!").queryLabeled().isVisible());
    }

    @Test
    void testEmptyNewPassword() {
        clickOn(".password-field").write("correctOldPassword");
        clickOn("Save");

        assertTrue(lookup("Password cannot be empty!").queryLabeled().isVisible());
    }

    @Test
    void testCancelButton() {
        clickOn("Cancel");
        assertFalse(primaryStage.isShowing()); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
    }
}
